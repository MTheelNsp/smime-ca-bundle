name: Check certificate policies

on:
  pull_request:
    branches: [ "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check:
    name: Check certificate policies
    runs-on: ubuntu-latest

    steps:
      - name: Get repo
        uses: actions/checkout@v4
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **.cer
            **.der
            **.pem

      - name: Check PEM encoding
        env:    
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          # check PEM encoding
          set +e
          fail=false
          for file in ${ALL_CHANGED_FILES}; do
            openssl x509 -noout -inform PEM -in $file &>/dev/null
            if [[ $? -ne 0 ]]
              then 
                echo "::error file=$file::$file is not PEM encoded."
                fail=true
            fi
          done        
          if [[ "$fail" == true ]]
            then
              echo "At least one certificate was not PEM encoded."
              exit 1
          fi

      - name: Check file name and location
        if: always()
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        shell: pwsh
        run: |
          # check file name and location
          $fail = $false
          foreach ($file in ${env:ALL_CHANGED_FILES}.Split(' ')) {
            $bytes = [System.IO.File]::ReadAllBytes($file)
            $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($bytes)
            $dn = [X500DistinguishedName]::new($cert.Subject)
            try {
              $cn = ($dn.Format($true).Split([Environment]::NewLine, [StringSplitOptions]::RemoveEmptyEntries) | Where-Object {$_ -match 'CN='}).Split('=')[1]
            } catch {
              $o = ($dn.Format($true).Split([Environment]::NewLine, [StringSplitOptions]::RemoveEmptyEntries) | Where-Object {$_ -match 'O='}).Split('=')[1]
              $cn = $o
            }
            $o = ($dn.Format($true).Split([Environment]::NewLine, [StringSplitOptions]::RemoveEmptyEntries) | Where-Object {$_ -match 'O='}).Split('=')[1]
            $oTemp = $o.Replace(' ','_')
            $oTemp2 = $otemp.Replace('"','')
            $org = $oTemp2.Split([IO.Path]::GetInvalidFileNameChars()) -join '-'
            $filenameTemp = "$($cn.Replace(' ','_'))_$($cert.Thumbprint).der"
            $filenameTemp2 = $filenameTemp.Replace('"','')
            $filename = $filenameTemp2.Split([IO.Path]::GetInvalidFileNameChars()) -join '-'
            $year = $cert.NotBefore.Year
            if ($cert.Issuer -eq $cert.Subject) {
                if ($file -ne "roots/$org/$year/$filename") {
                  echo "::error file=$file::$file - root certificate is a wrong location."
                  echo "::notice:: file should be located under roots/$org/$year/$filename"
                  $fail = $true
                }
            } else {
                if ($file -ne "intermediaries/$org/$year/$filename") {
                  echo "::error file=$file::$file - intermediate certificate is a wrong location."
                  echo "::notice:: file should be located under roots/$org/$year/$filename"
                  $fail = $true
                }
            }        
          }  
          if ($fail -eq $true) {
            echo "At least one certificate is in a wrongl location."
            exit 1
          }
